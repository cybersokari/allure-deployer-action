{"version":3,"file":"environmentFactory.js","names":["relative","env","allure","Stage","Status","getMessageAndTraceFromError","getStatusFromError","ReporterRuntime","createDefaultWriter","getEnvironmentLabels","getFrameworkLabel","getHostLabel","getLanguageLabel","getPackageLabel","getPosixPath","getSuiteLabels","getThreadLabel","parseTestPlan","setGlobalTestRuntime","AllureJestTestRuntime","getTestId","getTestPath","isTestPresentInTestPlan","last","shouldHookBeSkipped","createJestEnvironment","Base","_Class_brand","WeakSet","constructor","config","context","_classPrivateMethodInitSpec","_defineProperty","executables","steps","scopes","skippedTestsFullNamesByTestPlan","event","name","_assertClassBrand","_handleHookStart","call","hook","_handleHookPass","_handleHookFail","error","_handleSuiteStart","_handleSuiteEnd","_handleTestScopeStart","_handleTestStart","test","_handleTestPass","_handleTestFail","_handleTestScopeStop","_handleTestSkip","_handleTestTodo","_handleRunFinish","projectConfig","_ref","testEnvironmentOptions","resultsDir","restConfig","_objectWithoutProperties","_excluded","runtime","_objectSpread","writer","testPath","rootDir","testPlan","testRuntime","global","setup","teardown","handleAllureRuntimeMessage","message","executableUuid","runContext","applyRuntimeMessages","_getTestFullName","newTestSuitePath","parent","newTestPath","concat","newTestId","_startScope","_stopScope","scopeUuid","fixtureUuid","startFixture","type","push","pop","updateFixture","r","status","PASSED","stage","FINISHED","stopFixture","BROKEN","statusDetails","trace","undefined","stack","_test$startedAt","newTestFullName","mode","testUuid","startTest","fullName","start","startedAt","RUNNING","labels","JEST_WORKER_ID","_tr","_tr2","details","_statusAndDetails","errors","tr","updateTest","result","SKIPPED","writeTest","startScope","writeScope","_test$duration","_currentExecutable","suppressedErrors","expect","getState","statusAndDetails","stopTest","duration","_test$duration2","includes","writeEnvironmentInfo","writeCategoriesDefinitions","length","hasMultipleErrors","Array","isArray","firstError"],"sources":["../../src/environmentFactory.ts"],"sourcesContent":["import type { EnvironmentContext, JestEnvironment, JestEnvironmentConfig } from \"@jest/environment\";\nimport type { Circus } from \"@jest/types\";\nimport { relative } from \"node:path\";\nimport { env } from \"node:process\";\nimport * as allure from \"allure-js-commons\";\nimport { Stage, Status, type StatusDetails, type TestResult } from \"allure-js-commons\";\nimport type { RuntimeMessage } from \"allure-js-commons/sdk\";\nimport { getMessageAndTraceFromError, getStatusFromError } from \"allure-js-commons/sdk\";\nimport type { TestPlanV1 } from \"allure-js-commons/sdk\";\nimport {\n  ReporterRuntime,\n  createDefaultWriter,\n  getEnvironmentLabels,\n  getFrameworkLabel,\n  getHostLabel,\n  getLanguageLabel,\n  getPackageLabel,\n  getPosixPath,\n  getSuiteLabels,\n  getThreadLabel,\n  parseTestPlan,\n} from \"allure-js-commons/sdk/reporter\";\nimport { setGlobalTestRuntime } from \"allure-js-commons/sdk/runtime\";\nimport { AllureJestTestRuntime } from \"./AllureJestTestRuntime.js\";\nimport type { AllureJestConfig, AllureJestEnvironment, AllureJestProjectConfig, RunContext } from \"./model.js\";\nimport { getTestId, getTestPath, isTestPresentInTestPlan, last, shouldHookBeSkipped } from \"./utils.js\";\n\nconst createJestEnvironment = <T extends typeof JestEnvironment>(Base: T): T => {\n  // @ts-expect-error (ts(2545)) Incorrect assumption about a mixin class: https://github.com/microsoft/TypeScript/issues/37142\n  return class extends Base {\n    testPath: string;\n    testPlan?: TestPlanV1;\n    runtime: ReporterRuntime;\n    runContext: RunContext = {\n      executables: [],\n      steps: [],\n      scopes: [],\n      skippedTestsFullNamesByTestPlan: [],\n    };\n\n    // config is AllureJestConfig in Jest v28 or greater. In older versions\n    // it's AllureJestProjectConfig. See https://github.com/jestjs/jest/pull/12461\n    constructor(config: AllureJestConfig | AllureJestProjectConfig, context: EnvironmentContext) {\n      super(config as JestEnvironmentConfig, context);\n\n      const projectConfig = \"projectConfig\" in config ? config.projectConfig : config;\n      const { resultsDir, ...restConfig } = projectConfig?.testEnvironmentOptions || {};\n\n      this.runtime = new ReporterRuntime({\n        ...restConfig,\n        writer: createDefaultWriter({ resultsDir }),\n      });\n      this.testPath = relative(projectConfig.rootDir, context.testPath);\n      this.testPlan = parseTestPlan();\n\n      // @ts-ignore\n      const testRuntime = new AllureJestTestRuntime(this as AllureJestEnvironment, this.global);\n\n      // @ts-ignore\n      this.global.allure = allure;\n\n      setGlobalTestRuntime(testRuntime);\n    }\n\n    setup() {\n      return super.setup();\n    }\n\n    teardown() {\n      return super.teardown();\n    }\n\n    handleAllureRuntimeMessage(message: RuntimeMessage) {\n      const executableUuid = last(this.runContext.executables);\n\n      this.runtime.applyRuntimeMessages(executableUuid, [message]);\n    }\n\n    handleTestEvent = (event: Circus.Event) => {\n      switch (event.name) {\n        case \"hook_start\":\n          this.#handleHookStart(event.hook);\n          break;\n        case \"hook_success\":\n          this.#handleHookPass(event.hook);\n          break;\n        case \"hook_failure\":\n          this.#handleHookFail(event.hook, event.error);\n          break;\n        case \"run_describe_start\":\n          this.#handleSuiteStart();\n          break;\n        case \"run_describe_finish\":\n          this.#handleSuiteEnd();\n          break;\n        case \"test_start\":\n          this.#handleTestScopeStart();\n          break;\n        case \"test_fn_start\":\n          this.#handleTestStart(event.test);\n          break;\n        case \"test_fn_success\":\n          this.#handleTestPass(event.test);\n          break;\n        case \"test_fn_failure\":\n          this.#handleTestFail(event.test);\n          break;\n        case \"test_done\":\n          this.#handleTestScopeStop(event.test);\n          break;\n        case \"test_skip\":\n          this.#handleTestSkip(event.test);\n          break;\n        case \"test_todo\":\n          this.#handleTestTodo(event.test);\n          break;\n        case \"run_finish\":\n          this.#handleRunFinish();\n          break;\n        default:\n          break;\n      }\n    };\n\n    #getTestFullName(test: Circus.TestEntry) {\n      const newTestSuitePath = getTestPath(test.parent);\n      const newTestPath = newTestSuitePath.concat(test.name);\n      const newTestId = getTestId(newTestPath);\n\n      return `${getPosixPath(this.testPath)}#${newTestId}`;\n    }\n\n    #handleSuiteStart() {\n      this.#startScope();\n    }\n\n    #handleSuiteEnd() {\n      this.#stopScope();\n    }\n\n    #handleHookStart(hook: Circus.Hook) {\n      if (shouldHookBeSkipped(hook)) {\n        return;\n      }\n\n      const scopeUuid = last(this.runContext.scopes);\n      const fixtureUuid = this.runtime.startFixture(scopeUuid, /after/i.test(hook.type) ? \"after\" : \"before\", {\n        name: hook.type,\n      })!;\n\n      this.runContext.executables.push(fixtureUuid);\n    }\n\n    #handleHookPass(hook: Circus.Hook) {\n      if (shouldHookBeSkipped(hook)) {\n        return;\n      }\n\n      const fixtureUuid = this.runContext.executables.pop()!;\n\n      this.runtime.updateFixture(fixtureUuid, (r) => {\n        r.status = Status.PASSED;\n        r.stage = Stage.FINISHED;\n      });\n      this.runtime.stopFixture(fixtureUuid);\n    }\n\n    #handleHookFail(hook: Circus.Hook, error: string | Circus.Exception) {\n      if (shouldHookBeSkipped(hook)) {\n        return;\n      }\n\n      const fixtureUuid = this.runContext.executables.pop()!;\n      const status = typeof error === \"string\" ? Status.BROKEN : getStatusFromError(error as Error);\n\n      this.runtime.updateFixture(fixtureUuid, (r) => {\n        r.status = status;\n        r.statusDetails = {\n          message: typeof error === \"string\" ? error : error.message,\n          trace: typeof error === \"string\" ? undefined : error.stack,\n        };\n        r.stage = Stage.FINISHED;\n      });\n      this.runtime.stopFixture(fixtureUuid);\n    }\n\n    #handleTestStart(test: Circus.TestEntry) {\n      const newTestSuitePath = getTestPath(test.parent);\n      const newTestFullName = this.#getTestFullName(test);\n\n      if (this.testPlan && !isTestPresentInTestPlan(newTestFullName, this.testPlan)) {\n        test.mode = \"skip\";\n        this.runContext.skippedTestsFullNamesByTestPlan.push(newTestFullName);\n        return;\n      }\n\n      const testUuid = this.runtime.startTest(\n        {\n          name: test.name,\n          fullName: newTestFullName,\n          start: test.startedAt ?? undefined,\n          stage: Stage.RUNNING,\n          labels: [\n            getLanguageLabel(),\n            getFrameworkLabel(\"jest\"),\n            getPackageLabel(this.testPath),\n            getHostLabel(),\n            getThreadLabel(env.JEST_WORKER_ID),\n            ...getEnvironmentLabels(),\n            ...getSuiteLabels(newTestSuitePath),\n          ],\n        },\n        this.runContext.scopes,\n      );\n\n      this.runContext.executables.push(testUuid);\n\n      return testUuid;\n    }\n\n    #handleTestScopeStart() {\n      this.#startScope();\n    }\n\n    #handleTestScopeStop(test: Circus.TestEntry) {\n      const testUuid = this.runContext.executables.pop();\n\n      if (testUuid) {\n        const { details } = this.#statusAndDetails(test.errors);\n        let tr: TestResult | undefined;\n        this.runtime.updateTest(testUuid, (result) => {\n          tr = result;\n        });\n        // hook failure, finish as skipped\n        if (tr?.status === undefined && tr?.stage === Stage.RUNNING) {\n          this.runtime.updateTest(testUuid, (result) => {\n            result.stage = Stage.FINISHED;\n            result.status = Status.SKIPPED;\n            result.statusDetails = {\n              ...result.statusDetails,\n              ...details,\n            };\n          });\n        }\n\n        this.runtime.writeTest(testUuid);\n      }\n\n      this.#stopScope();\n    }\n\n    #startScope() {\n      const scopeUuid = this.runtime.startScope();\n\n      this.runContext.scopes.push(scopeUuid);\n    }\n\n    #stopScope() {\n      const scopeUuid = this.runContext.scopes.pop();\n      if (!scopeUuid) {\n        return;\n      }\n\n      this.runtime.writeScope(scopeUuid);\n    }\n\n    #handleTestPass(test: Circus.TestEntry) {\n      const testUuid = this.#currentExecutable();\n\n      if (!testUuid) {\n        return;\n      }\n      // @ts-ignore\n      const { suppressedErrors = [] } = this.global.expect.getState();\n      const statusAndDetails = this.#statusAndDetails(suppressedErrors as Circus.TestError[]);\n\n      this.runtime.updateTest(testUuid, (result) => {\n        result.stage = Stage.FINISHED;\n        result.status = statusAndDetails.status;\n        result.statusDetails = {\n          ...result.statusDetails,\n          ...statusAndDetails.details,\n        };\n      });\n\n      this.runtime.stopTest(testUuid, { duration: test.duration ?? 0 });\n    }\n\n    #handleTestFail(test: Circus.TestEntry) {\n      const testUuid = this.#currentExecutable();\n\n      if (!testUuid) {\n        return;\n      }\n\n      const { status, details } = this.#statusAndDetails(test.errors);\n\n      this.runtime.updateTest(testUuid, (result) => {\n        result.stage = Stage.FINISHED;\n        result.status = status;\n        result.statusDetails = {\n          ...result.statusDetails,\n          ...details,\n        };\n      });\n      this.runtime.stopTest(testUuid, { duration: test.duration ?? 0 });\n    }\n\n    #handleTestSkip(test: Circus.TestEntry) {\n      const newTestFullName = this.#getTestFullName(test);\n\n      if (this.runContext.skippedTestsFullNamesByTestPlan.includes(newTestFullName)) {\n        return;\n      }\n\n      // noinspection JSPotentiallyInvalidUsageOfThis\n      const testUuid = this.#handleTestStart(test);\n\n      if (!testUuid) {\n        return;\n      }\n\n      this.runtime.updateTest(testUuid, (result) => {\n        result.stage = Stage.FINISHED;\n        result.status = Status.SKIPPED;\n      });\n      // noinspection JSPotentiallyInvalidUsageOfThis\n      this.#handleTestScopeStop(test);\n    }\n\n    #handleTestTodo(test: Circus.TestEntry) {\n      // noinspection JSPotentiallyInvalidUsageOfThis\n      const testUuid = this.#handleTestStart(test);\n      if (!testUuid) {\n        return;\n      }\n\n      this.runtime.updateTest(testUuid, (result) => {\n        result.stage = Stage.FINISHED;\n        result.status = Status.SKIPPED;\n        result.statusDetails = {\n          message: \"TODO\",\n        };\n      });\n      // noinspection JSPotentiallyInvalidUsageOfThis\n      this.#handleTestScopeStop(test);\n    }\n\n    #handleRunFinish() {\n      this.runtime.writeEnvironmentInfo();\n      this.runtime.writeCategoriesDefinitions();\n    }\n\n    #currentExecutable() {\n      if (this.runContext.executables.length === 0) {\n        return undefined;\n      }\n      return this.runContext.executables[this.runContext.executables.length - 1];\n    }\n\n    #statusAndDetails(errors: Circus.TestError[]): { status: Status; details: Partial<StatusDetails> } {\n      if (errors.length === 0) {\n        return {\n          status: Status.PASSED,\n          details: {},\n        };\n      }\n      // jest collects all errors, but we need to report the first one because it's a reason why the test has been failed\n      const [error] = errors;\n      const hasMultipleErrors = Array.isArray(error);\n      const firstError: Error = hasMultipleErrors ? error[0] : error;\n      const details = getMessageAndTraceFromError(firstError);\n      const status = getStatusFromError(firstError);\n      return { status, details };\n    }\n  };\n};\n\nexport { createJestEnvironment };\n"],"mappings":"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","ignoreList":[]}