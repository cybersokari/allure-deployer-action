import { changePermissionsRecursively } from "../../utilities/util.js";
// Max allowed Firebase sites to prevent exceeding quota
// https://firebase.google.com/docs/hosting/multisites
const maxFirebaseAllowedSites = 36;
// Implements Firebase-specific hosting provider functionality
export class FirebaseHost {
    // Initialize class properties from input arguments
    constructor(service) {
        this.service = service;
    }
    // Deploys the Firebase hosting site
    async deploy() {
        const configPath = await this.service.createConfigJson();
        // Make Allure report files executable
        await changePermissionsRecursively(this.service.rootDir, 0o755, 10);
        try {
            await this.service.deployHosting(configPath);
            return this.hostedSiteUrl;
        }
        catch (err) {
            console.warn('Failed to deploy report to Firebase hosting', err);
            return undefined;
        }
    }
    // Initializes the Firebase hosting setup and creates a new site
    async init(clean = false) {
        try {
            if (clean) {
                try {
                    await this.deleteAllSites();
                    console.log('All sites have been deleted.');
                }
                catch (e) { }
            }
            const data = await this.createFirebaseSite();
            this.hostedSiteUrl = data.defaultUrl;
            return this.hostedSiteUrl;
        }
        catch (e) {
            console.error('Cannot create firebase.json. Aborting deployment...', e);
            throw e;
        }
    }
    // Creates a new Firebase hosting site, deleting the oldest if the limit is reached
    async createFirebaseSite() {
        const sites = await this.getExistingFirebaseSiteIds();
        if (sites.length >= maxFirebaseAllowedSites) {
            const configPath = await this.service.createConfigJson();
            await this.deleteFirebaseSite(sites[0], configPath);
            console.log(`Oldest report deleted to create new report. Max. ${maxFirebaseAllowedSites}`);
        }
        try {
            return await this.service.createSite();
        }
        catch (e) {
            console.error('Failed to create site:', e);
            throw e;
        }
    }
    async deleteAllSites() {
        const sites = await this.getExistingFirebaseSiteIds();
        const configPath = await this.service.createConfigJson();
        let numberOfDeletedSites = 0;
        for (const site of sites) {
            try {
                await this.deleteFirebaseSite(site, configPath);
                numberOfDeletedSites++;
            }
            catch (e) {
                console.warn('Failed to delete site:', e);
            }
        }
        console.log(`${numberOfDeletedSites} sites have been deleted.`);
    }
    // Retrieves existing Firebase site IDs
    async getExistingFirebaseSiteIds() {
        try {
            const sites = await this.service.listSites();
            return sites
                .map((site) => this.extractSubdomain(site.defaultUrl))
                .filter(this.hasValidTimestamp)
                .sort(this.compareTimestamps);
        }
        catch (err) {
            console.error('Failed to list existing Firebase sites', err);
            throw err;
        }
    }
    // Extracts subdomain from a Firebase hosting URL
    extractSubdomain(url) {
        const match = /^https:\/\/([^\/]+)\.([^\/]+\.[^\/]+)\/?/.exec(url);
        return match?.[1] ?? '';
    }
    // Validates if the subdomain contains a valid timestamp
    hasValidTimestamp(value) {
        return /-(\d{13})-/.test(value);
    }
    // Compares timestamps for sorting site IDs
    compareTimestamps(a, b) {
        const getTimestamp = (str) => {
            const match = /-(\d{13})-/.exec(str);
            return match ? parseInt(match[1], 10) : 0;
        };
        return getTimestamp(a) - getTimestamp(b);
    }
    // Deletes an existing Firebase hosting site to free up space
    async deleteFirebaseSite(siteId, configPath) {
        return await this.service.deleteSite({ siteId, configPath });
    }
}
