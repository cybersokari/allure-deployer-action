import { Icon } from "../../utilities/icon.js";
import { appLog } from "../../utilities/util.js";
import ansiEscapes from "ansi-escapes";
import chalk from "chalk";
import { StringBuilder } from "../../lib.js";
export class ConsoleNotifier {
    constructor() {
    }
    isHyperlinkSupported() {
        // Check for CI environments or non-TTY outputs
        return process.stdout.isTTY && !process.env.CI;
    }
    link(text, url) {
        // Use `ansiEscapes.link` if hyperlinks are supported; otherwise, return plain text
        return this.isHyperlinkSupported() ? ansiEscapes.link(text, url) : url;
    }
    writeStatuses(status) {
        const builder = new StringBuilder();
        if (status.passed) {
            builder.append(`${Icon.SUCCESS} Passed            : ${chalk.yellow(status.passed)}`).append(`\n`);
        }
        if (status.broken) {
            builder.append(`${Icon.WARNING} Broken            : ${chalk.yellow(status.broken)}`).append(`\n`);
        }
        if (status.skipped) {
            builder.append(`${Icon.SKIPPED} Skipped           : ${chalk.yellow(status.skipped)}`).append(`\n`);
        }
        if (status.failed) {
            builder.append(`${Icon.FAILURE} Failed            : ${chalk.yellow(status.failed)}`).append(`\n`);
        }
        if (status.unknown) {
            builder.append(`${Icon.QUESTION_MARK} Unknown           : ${chalk.yellow(status.unknown)}`);
        }
        return builder.toString();
    }
    async notify(data) {
        const dashboardUrl = data.storageUrl;
        const reportUrl = data.reportUrl;
        if (dashboardUrl && reportUrl) {
            appLog(`
${Icon.CHART} Test report URL   : ${this.link(chalk.blue(reportUrl), reportUrl)}
${Icon.FILE_UPLOAD} Storage URL       : ${this.link(chalk.blue(dashboardUrl), dashboardUrl)}
${this.writeStatuses(data.resultStatus)}
`);
        }
        if (dashboardUrl && !reportUrl) {
            appLog(`
${Icon.FILE_UPLOAD} Storage URL       : ${this.link(chalk.blue(dashboardUrl), dashboardUrl)}
${this.writeStatuses(data.resultStatus)}
`);
        }
        if (!dashboardUrl && reportUrl) {
            appLog(`
${Icon.CHART} Test report URL   : ${this.link(chalk.blue(reportUrl), reportUrl)}
${this.writeStatuses(data.resultStatus)}
`);
        }
    }
}
