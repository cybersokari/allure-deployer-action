import { StorageProvider } from "../interfaces/storage-provider.interface.js";
import { ArgsInterface } from "../interfaces/args.interface.js";
/**
 * The Storage class manages the staging, uploading, and unzipping of files
 * from a remote Google Cloud Storage bucket.
 */
export declare class Storage {
    private provider;
    private args;
    private unzipper;
    /**
     * Constructs a Storage instance.
     * @param provider - The storage provider to interact with cloud storage.
     * @param args - Arguments for file handling and configuration.
     */
    constructor(provider: StorageProvider, args: ArgsInterface);
    /**
     * Orchestrates downloading files from the remote storage to a local staging area.
     */
    stageFilesFromStorage(): Promise<void>;
    /**
     * Zips and uploads results and report history (if enabled) to the remote storage.
     */
    uploadArtifacts(): Promise<void>;
    /**
     * Extracts the contents of a ZIP file into the specified directory.
     * @param zipFilePath - Path to the ZIP file.
     * @param outputDir - Directory to extract the contents into.
     * @returns A promise that resolves when extraction is complete.
     */
    unzipToStaging(zipFilePath: string, outputDir: string): Promise<boolean>;
    /**
     * Deletes all files in the remote storage if the `clean` option is enabled.
     */
    private cleanUpRemoteFiles;
    /**
     * Ensures the local directories exist.
     */
    private createStagingDirectories;
    /**
     * Downloads and stages the history archive.
     */
    private stageHistoryFiles;
    /**
     * Stages the result files and deletes older files exceeding the retry limit.
     * @param retries - Maximum number of files to keep.
     */
    private stageResultFiles;
    /**
     * Returns the path for the results archive.
     */
    private getResultsArchivePath;
    /**
     * Returns the path for the history archive.
     */
    private getHistoryArchivePath;
    /**
     * Returns the path for the history folder.
     */
    private getHistoryFolder;
    /**
     * Zips and uploads new results to the remote storage.
     * @param resultsArchivePath - Path to the results archive.
     */
    private uploadNewResults;
    /**
     * Zips and uploads the history archive to the remote storage.
     * @param historyArchivePath - Path to the history archive.
     */
    private uploadHistory;
}
