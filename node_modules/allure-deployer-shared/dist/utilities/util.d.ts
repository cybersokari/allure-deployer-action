/// <reference types="node" />
import * as fsSync from 'fs';
import { ReportStatistic } from "../interfaces/counter.interface.js";
export declare const ERROR_MESSAGES: {
    EMPTY_RESULTS: string;
    NO_RESULTS_DIR: string;
    MISSING_CREDENTIALS: string;
    MISSING_BUCKET: string;
    INVALID_SLACK_CRED: string;
    NO_JAVA: string;
};
export declare function appLog(data: string): void;
export declare function changePermissionsRecursively(dirPath: string, mode: fsSync.Mode, maxDepth?: number): Promise<void>;
export declare function archiveFilesInDirectories({ source, outputFilePath, exclude }: {
    source: {
        path: string;
        destination?: string;
    }[];
    outputFilePath: string;
    exclude?: string[];
}): Promise<string>;
export declare function countFiles(directory: string[]): Promise<number>;
export declare function isFileTypeAllure(filePath: string): boolean;
/**
 * Validates and filters the file paths from a comma-separated string.
 *
 * @param commaSeparatedResultPaths - A string containing file paths separated by commas.
 * @returns A Promise resolving to an array of valid file paths that exist on the filesystem.
 */
export declare function validateResultsPaths(commaSeparatedResultPaths: string): Promise<string[]>;
export declare function getReportStats(reportDir: string): Promise<ReportStatistic>;
export declare function getDashboardUrl({ projectId, storageBucket }: {
    projectId: string;
    storageBucket: string;
}): string;
