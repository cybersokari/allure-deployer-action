import { Mutex } from 'async-mutex';
/**
 * Counter Class
 *
 * Provides thread-safe counters to track the number of files processed
 * and uploaded, as well as timing functionalities to measure elapsed time.
 * Utilizes a mutex for safe concurrent updates to shared counters.
 */
class Counter {
    constructor() {
        this.startTime = undefined;
        this.processed = 0;
        this.uploaded = 0;
        this.mutex = new Mutex();
    }
    async addFilesProcessed(count) {
        await this.mutex.runExclusive(() => {
            this.processed += count;
        });
    }
    async addFilesUploaded(count) {
        await this.mutex.runExclusive(() => {
            this.uploaded += count;
        });
    }
    startTimer() {
        if (!this.startTime) {
            this.startTime = Date.now();
        }
    }
    getElapsedSeconds() {
        if (!this.startTime) {
            throw "Timer has not been started.";
        }
        const elapsed = Date.now() - this.startTime;
        return (elapsed / 1000).toFixed();
    }
}
export const counter = new Counter();
